apiVersion: cloudnativetoolkit.dev/v2
kind: Solution
metadata:
  name: infra-ibmcloud-standard
  labels:
    type: infrastructure
    platform: ibm
    flavor: standard
  annotations:
    displayName: 'Infrastructure: IBM Cloud Standard'
    description: >-
      A standard production deployment environment with typical security
      protections, private endpoints, VPN server, key management encryption,
      ideal for POC/POT/MVP
    files.cloudnativetoolkit.dev/diagram: diagram.png
    files.cloudnativetoolkit.dev/readme: README.md
spec:
  version: v1.0.0
  variables:
    - name: config_banner_text
      type: string
      description: The text that will appear in the top banner in the cluster
    - name: cs_resource_group_name
      type: string
      description: The name of the resource group
    - name: gitops_repo_repo
      type: string
      description: >-
        The short name of the repository (i.e. the part after the org/group
        name)
    - name: ibmcloud_api_key
      type: string
      description: The api key for IBM Cloud access
    - name: kms_region
      type: string
      description: Geographic location of the resource (e.g. us-south, us-east)
    - name: kms_resource_group_name
      type: string
      description: The name of the resource group
    - name: region
      type: string
      description: The IBM Cloud region.
    - name: vpc_resource_group_name
      type: string
      description: The name of the resource group
    - name: cluster_flavor
      type: string
      description: The machine type that will be provisioned for classic infrastructure
      value: bx2.16x64
    - name: common_tags
      type: list(string)
      description: Common tags that should be added to the instance
      value: []
    - name: egress-subnets__count
      type: number
      description: The number of subnets that should be provisioned
      value: 3
    - name: gitops_repo_host
      type: string
      description: >-
        The host for the git repository. The git host used can be a GitHub,
        GitHub Enterprise, Gitlab, Bitbucket, Gitea or Azure DevOps server. If
        the host is null assumes in-cluster Gitea instance will be used.
      value: ''
    - name: gitops_repo_org
      type: string
      description: >-
        The org/group where the git repository exists/will be provisioned. If
        the value is left blank then the username org will be used.
      value: ''
    - name: gitops_repo_project
      type: string
      description: >-
        The project that will be used for the git repo. (Primarily used for
        Azure DevOps repos)
      value: ''
    - name: gitops_repo_token
      type: string
      description: The personal access token used to access the repository
      value: ''
      sensitive: true
    - name: gitops_repo_username
      type: string
      description: The username of the user with access to the repository
      value: ''
    - name: ingress-subnets__count
      type: number
      description: The number of subnets that should be provisioned
      value: 3
    - name: kms_service
      type: string
      description: The name of the KMS provider that should be used (keyprotect or hpcs)
      value: keyprotect
    - name: vpc_name_prefix
      type: string
      description: >-
        The name_prefix used to build the name if one is not provided. If used
        the name will be `{name_prefix}-{label}`
      value: base
    - name: vpe-subnets__count
      type: number
      description: The number of subnets that should be provisioned
      value: 3
    - name: worker_count
      type: number
      description: >-
        The number of worker nodes that should be provisioned for classic
        infrastructure
      value: 1
    - name: worker_subnet_count
      type: number
      description: The number of subnets that should be provisioned
      value: 3
  files:
    - name: README.md
      type: doc
      content: >
        # IBM Cloud Standard Reference Architecture


        Automation to provision the Standard architecture on IBM Cloud. This
        architecture provides an environment suitable for production workloads
        on a single OpenShift cluster.


        ## Reference Architecture


        ![Reference Architecture](./architecture.png)


        <table>
            <thead>
                <tr>
                    <th>Layer name</th>
                    <th>Layer description</th>
                    <th>Provided resources</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>000 - Account Setup</td>
                    <td>This layer sets up the account for a secure cluster configuration</td>
                    <td>
                        <h4>Shared Services</h4>
                        <ul>
                            <li>IAM settings</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>100 - Shared Services</td>
                    <td>This layer provisions the shared services</td>
                    <td>
                        <h4>Shared Services</h4>
                        <ul>
                            <li>Flow Logs</li>
                            <li>Activity Tracker</li>
                            <li>Cloud Object Storage (COS)</li>
                            <li>Object Storage Encryption</li>
                            <li>Certificate Manager</li>
                            <li>Key Management Service</li>
                            <li>VSI Encryption Setup</li>
                            <li>IBM Log Analysis</li>
                            <li>IBM Cloud Monitoring</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>110 - Edge VPC</td>
                    <td>This layer provisions the VPC to contain the cluster</td>
                    <td>
                        <h4>Network</h4>
                        <ul>
                            <li>Virtual Private Cloud (VPC)</li>
                            <li>VPC Gateways</li>
                            <li>Egress subnets</li>
                            <li>Ingress subnets</li>
                            <li>VPN Server</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>115 - IBM VPC OpenShift Standard</td>
                    <td>This layer provisions the OpenShift cluster within the Edge VPC created earlier</td>
                    <td>
                        <h4>Network</h4>
                        <ul>
                            <li>VPE Subnets and Gateway</li>
                            <li>Worker Subnets</li>
                            <li>Red Hat OpenShift cluster</li>
                        </ul>
                        <h4>Shared Services</h4>
                        <ul>
                            <li>Keyprotect Encryption</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>200 - IBM OpenShift Gitops</td>
                    <td>This layer provisions OpenShift CI/CD tools into the cluster, a GitOps repository, and bootstraps the
                        repository to the OpenShift Gitops instance.</td>
                    <td>
                        <h4>Software</h4>
                        <ul>
                            <li>OpenShift GitOps (ArgoCD)</li>
                            <li>OpenShift Pipelines (Tekton)</li>
                            <li>Sealed Secrets (Kubeseal)</li>
                            <li>GitOps repo</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>205 - IBM Storage</td>
                    <td>The storage layer offers two options: `odf` and `none` (default). Either odf or default storage can be
                        installed.</td>
                    <td>
                        <h4>ODF Storage</h4>
                        <ul>
                            <li>ODF operator</li>
                            <li>ODF storage classes</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>220 - Dev Tools</td>
                    <td>The dev tools layer installs standard continuous integration (CI) pipelines that integrate with tools
                        that support the software development lifecycle.</td>
                    <td>
                        <h4>Software</h4>
                        <ul>
                            <li>Artifactory</li>
                            <li>Developer Dashboard</li>
                            <li>Pact Broker</li>
                            <li>Sonarqube</li>
                            <li>Tekton Resources</li>
                        </ul>
                    </td>
                </tr>
            </tbody>
        </table>


        ## Automation Stages


        ### Prerequisites


        1. Have access to an IBM Cloud Account. An Enterprise account is best
        for workload isolation but this terraform can be run in a Pay Go account
        as well.


        2. Requires use of terraform 1.2.x. Versions 1.3 and above are not
        supported with this automation at this time.


        3. At this time the most reliable way of running this automation is with
        Terraform in your local machine either through a bootstrapped docker
        image or Virtual Machine. We provide both a [container
        image](https://github.com/cloud-native-toolkit/image-cli-tools) and a
        virtual machine
        [cloud-init](https://github.com/cloud-native-toolkit/sre-utilities/blob/main/cloud-init/cli-tools.yaml)
        script that have all the common SRE tools installed.


        We recommend using Docker Desktop if choosing the container image
        method, and Multipass if choosing the virtual machine method.   Detailed
        instructions for downloading and configuring both Docker Desktop and
        Multipass can be found in [RUNTIMES.md](./RUNTIMES.md)


        ### Setup


        1. Clone this repository to your local SRE laptop or into a secure
        terminal. Open a shell into the cloned directory.

        2. Copy **credentials.template** to **credentials.properties**.
            ```shell
            cp credentials.template credentials.properties
            ```
        3. Provide values for the variables in **credentials.properties**
        (**Note:** `*.properties` has been added to **.gitignore** to ensure
        that the file containing the apikey cannot be checked into Git.)
          - **TF_VAR_ibmcloud_api_key** - The API key for the IBM Cloud account where the infrastructure will be provisioned.
          - **TF_VAR_gitops_repo_host** - (Optional) The host for the git repository (e.g. github.com, bitbucket.org). Supported Git servers are GitHub, Github Enterprise, Gitlab, Bitbucket, Azure DevOps, and Gitea. If this value is left commented out, the automation will default to using Gitea.
          - **TF_VAR_gitops_repo_username** - The username on git server host that will be used to provision and access the gitops repository. If the `gitops_repo_host` is blank this value will be ignored and the Gitea credentials will be used.
          - **TF_VAR_gitops_repo_token** - The personal access token that will be used to authenticate to the git server to provision and access the gitops repository. (The user should have necessary access in the org to create the repository and the token should have `delete_repo` permission.) If the host is blank this value will be ignored and the Gitea credentials will be used.
          - **TF_VAR_gitops_repo_org** - (Optional) The organization/owner/group on the git server where the gitops repository will be provisioned/found. If not provided the org will default to the username.
          - **TF_VAR_gitops_repo_project** - (Optional) The project on the Azure DevOps server where the gitops repository will be provisioned/found. This value is only required for repositories on Azure DevOps.

        4. Run **./launch.sh**. This will start a container image with the
        prompt opened in the `/terraform` directory, pointed to the repo
        directory.

        5. Create a working copy of the terraform by running
        **./setup-workspace.sh**. The script makes a copy of the terraform in
        `/workspaces/current` and set up "cluster.tfvars" and "gitops.tfvars"
        files populated with default values. The **setup-workspace.sh** script
        has a number of optional arguments.

            ```
            Usage: setup-workspace.sh [-f FLAVOR] -s STORAGE [-n PREFIX_NAME] [-r REGION] [-g GIT_HOST]
            options:
            -f   (optional) the flavor to use (quickstart)
            -s   the storage option to use (none or odf)
            -n   (optional) prefix that should be used for all variables
            -r   (optional) the region where the infrastructure will be provisioned
            -g   (optional) the git host that will be used for the gitops repo. If left blank gitea will be used by default. (Github, Github Enterprise, Gitlab, Bitbucket, Azure DevOps, and Gitea servers are supported)
            -h   Print this help
            ```

        6. Change the directory to the current workspace where the automation
        was configured (e.g. `/workspaces/current`).

        7. Inspect **cluster.tfvars** to see if there are any variables that
        should be changed. (The **setup-workspace.sh** script has generated
        **cluster.tfvars** with default values and can be used without updates,
        if desired.)


        #### Run all the Terraform layers automatically


        From the **/workspace/current** directory, run the following:


        ```shell

        ./apply-all.sh

        ```


        The script will run through each of the terraform layers in sequence to
        provision the entire infrastructure.


        #### Run all the Terraform layers manually


        From the **/workspace/current** directory, run change directory into
        each of the layer subdirectories and run the following:


        ```shell

        cd <directory_name>

        ./apply.sh

        ```
    - name: diagram.png
      type: image
      contentUrl: >-
        https://raw.githubusercontent.com/cloud-native-toolkit/automation-solutions/main/architectures/ibmcloud/ref-arch-ibmcloud-openshift-2standard.png
  stack:
    - name: 000-ibm-account-setup
      layer: infrastructure
      description: >-
        Sets up an IBM Cloud account with required Financial Services reference
        architecture settings
      version: v1.0.0
    - name: 100-ibm-shared-services
      layer: infrastructure
      description: Managed services that are shared across the networks
      version: v1.0.0
    - name: 110-ibm-vpc-edge-standard
      layer: infrastructure
      description: IBM VPC with VPN, Bastion servers, and OpenShift
      version: v1.0.0
    - name: 115-ibm-vpc-openshift-standard
      layer: infrastructure
      description: IBM VPC with VPN, Bastion servers, and OpenShift
      version: v1.0.0
    - name: 200-openshift-gitops
      layer: software
      description: >-
        Provisions OpenShift GitOps (ArgoCD) into an existing cluster and
        bootstraps it to a gitops repository
      version: v1.0.1
    - name: 220-dev-tools
      layer: software
      description: Provisions development tools in an OpenShift cluster
      version: v1.0.0
